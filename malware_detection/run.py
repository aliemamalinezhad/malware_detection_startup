from flask import Flask
from db_helper import connectiondb
from utils.validations import valid_username, validate_email
from flask import Flask, g, request, jsonify, flash, redirect, render_template, session, abort, url_for

from views.home import users
from views.ml import ml
import uuid

from flask_jwt_extended import (
    JWTManager, jwt_required, create_access_token,
    jwt_refresh_token_required, create_refresh_token,
    get_jwt_identity, set_access_cookies,
    set_refresh_cookies, unset_jwt_cookies , current_user,jwt_refresh_token_required,create_refresh_token
)
from flask_jwt_extended import (
    JWTManager, jwt_required, create_access_token,
    jwt_refresh_token_required, create_refresh_token,
    get_jwt_identity
)

app = Flask(__name__)
app.register_blueprint(users)
app.register_blueprint(ml)
app.secret_key = '\x86\xdb;\x91\x9dQfX4\x151\xc0\xf1\x9c\xc1\xac\x87\xb1uk\x19$\xd0\xbb'
UPLOAD_FOLDER = '/Users/rop/projects/malware_detection/views'
app.config['JWT_TOKEN_LOCATION'] = ['cookies']
app.config['JWT_COOKIE_CSRF_PROTECT'] = False
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
jwt = JWTManager(app)
jwt.init_app(app)



class UserObject:
    def __init__(self, username, roles , email , uid):
        self.username = username
        self.roles = roles
        self.email = email
        self.uid = uid
    def getUsername(self):
        return self.username
    def getEmail(self):
        return self.email


@app.route('/panel')
@jwt_required
def post_list():
    return render_template('panel.htm' , current_user=current_user , route="panel")


@jwt.user_loader_error_loader
def custom_user_loader_error(identity):
    ret = {
        "msg": "User {} not found".format(identity)
    }
    return jsonify(ret), 404

@jwt.user_loader_callback_loader
def user_loader_callback(identity):
    email = identity.get('email')
    username = identity.get('username')
    uid = identity.get('uid')
    return UserObject(
        username=username,
        roles=1,
        email=email,
        uid=uid
    )

@app.route('/login', methods=['POST', 'GET'])
def login():
    if request.method == "GET":
        return render_template('login.htm' , current_user=current_user)
    if not request.is_json:
        return jsonify({"msg": "Missing JSON in request"}), 400

    username = request.json.get('username', None)
    password = request.json.get('password', None)
    if not username:
        return jsonify({"msg": "Missing username parameter"}), 400
    if not password:
        return jsonify({"msg": "Missing password parameter"}), 400

    user = connectiondb('users').find_one({'name': username})

    if username != user['name'] or password != user['password']:
        return jsonify({"msg": "Bad username or password"}), 401

    # Identity can be any data that is json serializable
    access_token = create_access_token(identity={"username" : username, "email" : "salam@yahoo.com" , "uid" : user['uid']})
        

    ret = {
        'access_token': create_access_token(identity={"username" : username, "email" : "salam@yahoo.com" , "uid" : user['uid']}),
        'refresh_token': create_refresh_token(identity={"username" : username, "email" : "salam@yahoo.com" , "uid" : user['uid']})
    }

    # session['access_token'] = access_token
    # session['refresh_token'] = refresh_token
    # return jsonify(access_token=access_token), 200
    return jsonify(ret), 200


@app.route('/register', methods = ['GET','POST'])
def register():
    if request.method == 'POST':
        name = request.form['username']
        print(name)
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['confirm-password']
        id =uuid.uuid4()

        if not valid_username(name)[1]:
            message = valid_username(name)[0]
            flash(message)
            return redirect('/register')

        if not validate_email(email)[1]:
            message = validate_email(email)[0]
            flash(message)
            return redirect('/register')

        if password != confirm_password:
            message = "Password does not match!"
            flash(message)
            
            return redirect('/register')

        result = connectiondb('users').insert_one(
            {'uid': str(id), 'name': str(name), 'email': str(email),
             'password': str(password)})
        print(result)
        flash('Thanks for registering')
        return redirect('/login')
    return render_template('register.htm')

@app.route('/logout')
def logout():
    resp = jsonify({'logout': True})
    unset_jwt_cookies(resp)
    session['access_token'] = False
    return redirect(url_for('login'))

@app.route('/')
def rred():
    return redirect(url_for('login'))



if __name__ == '__main__':
    app.run(port=8000, debug=True)