from flask import Blueprint, render_template,request, flash,session,redirect,url_for,flash,jsonify
from uuid import uuid4
from utils.validations import valid_username, validate_email
from db_helper import connectiondb
from werkzeug.utils import secure_filename
from flask_jwt_extended import (
    JWTManager, jwt_required, create_access_token,
    jwt_refresh_token_required, create_refresh_token,
    get_jwt_identity, set_access_cookies,
    set_refresh_cookies, unset_jwt_cookies , current_user

)
from time import gmtime, strftime
from werkzeug.security import safe_str_cmp
import os
from flask import current_app
import hashlib

UPLOAD_FOLDER = '/Users/rop/projects/malware_detection/views/'
ALLOWED_EXTENSIONS = {'exe'}

users = Blueprint('users', __name__)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def file_md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

@users.route('/upload', methods=['GET', 'POST'])
@jwt_required
def upload_file():
    if request.method == 'POST':
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        print(file)
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(current_app.config['UPLOAD_FOLDER'], filename))
            scan_id = str(uuid4())
            time = strftime("%Y-%m-%d %H:%M:%S", gmtime())
            connectiondb('win').insert_one({'scan_time':time ,'uid':current_user.uid,'filename': str(filename), 'token': session['access_token'], 'file_hash':file_md5(os.path.join(current_app.config['UPLOAD_FOLDER'], filename)), 'scanned':False ,'scann_result':'unknown', 'scan_id' : scan_id})
            # return render_template('panel.htm' , route="malware" , current_user=current_user , scan_id=scan_id)
            return redirect('/result/{}'.format(scan_id))
    return render_template('panel.htm' , route="malware" , current_user=current_user)




@users.route('/about')
@jwt_required
def about():
    return render_template('about.htm', route = "about",current_user = current_user)