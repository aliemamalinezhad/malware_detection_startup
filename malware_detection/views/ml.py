from flask import Blueprint, render_template, abort, request
from jinja2 import TemplateNotFound
import pefile
import os
import array
import math
import pickle
from sklearn.externals import joblib
import sys
import argparse
from collections import Counter
from .malware_test import *
from db_helper import connectiondb
from werkzeug.local import LocalProxy
from flask_jwt_extended.utils import get_current_user
from bson.json_util import dumps
import json
from datetime import datetime
from parsivar import Normalizer
import time
from parsivar import SpellCheck



from flask_jwt_extended import (
    JWTManager, jwt_required, create_access_token,
    jwt_refresh_token_required, create_refresh_token,
    get_jwt_identity, set_access_cookies,
    set_refresh_cookies, unset_jwt_cookies , current_user
)

ml = Blueprint('ml', __name__, template_folder='templates')

@ml.route("/result/<scan_id>")
@jwt_required
def get_result(scan_id):
   
    clf = joblib.load('/Users/rop/python/machine_learning/classifier/classifier.pkl')
    features = pickle.loads(open(os.path.join('/Users/rop/python/machine_learning/classifier/features.pkl'),'rb').read())
    #####reading file and analyzing .... 
    BASE_PATH = "/Users/rop/projects/malware_detection/views/"
    filename = connectiondb('win').find_one({'scan_id' : scan_id}).get('filename')
    filepath = os.path.join(BASE_PATH , filename)
    print(filepath)
    exists = os.path.isfile(filepath)
    data = []
    if exists:
        data = extract_infos(filepath)
        print(data)
    else:
        print('No such a file')
        return render_template('panel.htm')

    pe_features = list()
    for x in features:
        pe_features.append(data[x])
    
    res = clf.predict([pe_features])[0]
    print ('The file %s is %s' % (os.path.basename(filename),['malicious', 'legitimate'][res]))    
    result = 'The file %s is probably %s' % (os.path.basename(filename), ['malicious', 'legitimate'][res])
    topitems = Counter(data)
    topitems = topitems.most_common(5)
    topitems = dict(topitems)
    print(topitems)
    if res == 0:
        scan_result = "malicious"
    else:
        scan_result = "legitimate"
    connectiondb('win').update_one({'scan_id':scan_id}, {'$set': {"scann_result":str(scan_result),"scanned":True}})
    print('res')
    result = {"status":0, "res":out}
    time.sleep(1)
    result = json.dumps(result)
    return render_template('panel.htm',topitems = topitems, output = str(result) , scan_id=scan_id, result = scan_result, current_user = current_user)


@ml.route("/show/<scan_id>")
@jwt_required
def show(scan_id):
    BASE_PATH = "/Users/rop/projects/malware_detection/views/"
    filename = connectiondb('win').find_one({'scan_id' : scan_id}).get('filename')
    filepath = os.path.join(BASE_PATH , filename)
    data = extract_infos(filepath)

    return render_template('table.htm', x= data, current_user = current_user)




@ml.route("/detail")
@jwt_required
def detail():
    result = []
    ben =[]
    mal =[]
    uid = current_user.uid
    data = list(connectiondb('win').find({'uid' :uid}, {'_id':0, 'scanned':0}))
    for i in data:
        result.append(i['scann_result'])
    leg = result.count('legitimate')
    mal = result.count('malicious')
    print(leg)
    print(mal)
    return render_template("/detail.htm", data = data, result = result,leg = leg, mal = mal, route = 'detail',current_user = current_user)

@ml.route("/nlp", methods =['POST', "GET"])
@jwt_required
def nlp():

    if request.method == "GET":
        return render_template('/nlp.htm', current_user = current_user, route = 'nlp')
    else:
        
        sent =request.form.get('sent', 0)
        print(sent)
        my_normalizer = Normalizer(pinglish_conversion_needed=True)
        out = my_normalizer.normalize(sent)

        result = {"status":0, "res":out}
        time.sleep(1)
        return json.dumps(result)
    return render_template('/nlp.htm', out = out, current_user = current_user)


@ml.route('/reset')
def reset():
    render_template('/nlp.htm')